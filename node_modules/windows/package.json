{
  "_from": "windows",
  "_id": "windows@0.0.8",
  "_inBundle": false,
  "_integrity": "sha512-PMSJpn/mM00EVqqFiiWAmh+TnKoaEjJ+EzSDD+SXGQ3Aqz2oh4GNde3IO+qv9XvXBljME/DybZRVaCp4k/6o2A==",
  "_location": "/windows",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "windows",
    "fetchSpec": "latest",
    "name": "windows",
    "raw": "windows",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/windows/-/windows-0.0.8.tgz",
  "_shasum": "96463e10c0065e62f344a8ab1a73980d976d68a2",
  "_shrinkwrap": null,
  "_spec": "windows",
  "_where": "/Users/Van/Downloads/Node.js-Express-With-MySQL-master",
  "author": {
    "email": "me@philip-skinner.co.uk",
    "name": "Philip Skinner",
    "url": "https://github.com/PhilipSkinner"
  },
  "bin": {
    "cwddrive": "./bin/cwddrive.js",
    "makerunnable": "./bin/makerunnable.js"
  },
  "bugs": {
    "url": "https://github.com/PhilipSkinner/windows/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "jasmine": "^3.1.0"
  },
  "deprecated": false,
  "description": "A collection of utilities for Windows for Node.js",
  "devDependencies": {
    "jasmine": "3.1.0"
  },
  "homepage": "https://github.com/PhilipSkinner/windows",
  "main": "index.js",
  "name": "windows",
  "optionalDependencies": {},
  "readme": "# Node Utilities for Windows\n\nRight now it's just a few wrappers around some builtin console commands but FFI bindings are soon to come.\n\n## Command line tools\n\nSome wrappers for the below APIs to be used on the command line.\n\n```shell\n\ncwddrive                          alias a random available drive letter to current working directory\ncwddrive L                        alias L to CWD if not taken, or toggles it off if it currently is L\ncwddrive L C:/some/folder         alias L to C:/some/folder if available\n\nmakerunnable f1.js [f2.js] ...    creates a .cmd file in npm.globalBin (is in PATH) that will exec the .js\n```\n\n## APIs\n\n```javascript\n\ndriveAlias('x', folder)                  // alias a folder to `X:\\`\ndriveAlias('x')                          // remove aliased `X:\\` folderdrive\ndriveAlias()                             // list all aliased drives\n\n\nrunnable(['myCLI.js',...],function(r){   // for each js file given a %name%.cmd will be\n  'NPMGLOBALBIN/myCLI.cmd created'       // create in the npm global bin directory that\n    // or                                // will launch the given js file. npm's globalBin\n  'Could not find myCLI.js'              // is added to PATH by default on installation\n});\n\n\nassociations('.js'. 'jscript')           // add or change extension to type map\nassociations('.js')                      // retrieve type\nassociations()                           // list all extension -> types\n\nfileTypes('jscript'. process.execPath)   // add or change program that handles a filetype\n                                         // (example sets node as javascript's handler)\nfileTypes('jscript')                     // retrieve handler for the type\nfileTypes()                              // list all type -> handlers\n\n\ngetFontNames()                           // list all the fonts in the registry by type\n\n\nfindWindowsSDK() //-->                   // simply utility for detecting installed Windows\n  { path: winSDKfolder,                  // SDKs (header files). Returns null if not found.\n    versions: [8, 9, 10] }\n\n\nregistry(key, options)                   // returns an object containing the keys and values\n\nv = registry('HKLM/Software/Microsoft'   // wrapped in objects allowing further fluent commands\nv.someValue.remove()                     // delete value\nv.add('newValue', 'myValue')             // add new value\nv.add('newKey')                          // a key is like a folder\nv.subKey                                 // getter which goes down one level deeper\n\nx = registry('HKCU/Some/Random/Place')\nx.add('newName', v.someValue)            // clone a value\n\nz = v.aValue                             // manipulate wrapped values even after deleting them\nz.remove()\nv.add(z.name, z)  //oops undo\n\nv.remove()                               // delete a key and all its contents recursively\nv.remove('name')                         // just delete a child (key or value)\n\n\noptions = { search    : 'query',         // all options are optional\n            recursive : false,\n            case      : false,\n            exact     : false,\n            in        : 'keys' || 'values',\n            type      : 'REG_SZ'     || 'REG_MULTI_SZ'  || 'REG_DWORD' ||\n                        'REG_BINARY' || 'REG_EXPAND_SZ' || 'REG_QWORD' ||\n                        'REG_NONE' }\n\n\n// The raw commands are provided as well but are annoying to use directly\n\nregistry.query\nregistry.add\nregistry.delete\nregistry.copy\nregistry.save\nregistry.restore\nregistry.load\nregistry.unload\nregistry.compare\nregistry.export\nregistry.import\nregistry.flags\n\n\nexecSync('cmd' ...)                     // executes the command synchronously and returns the result,\n                                        // flattening all params down to spaced delineation\n\nCommand(command, name, formatter)       // create a wrapped execSync calling function that executes\n                                        // the command when called. Name and formatter are optiona,\n                                        // with the default formatter splits the result into an array of lines\n\n\n\n\nfunction parseCSV(str){\n  return str.trim().split(/\\r?\\n/).map(function(str){\n    return JSON.parse('['+str+']');\n  });\n  return str;\n}\n\nvar nodes = Command('tasklist /fo csv /fi \"imagename eq node.exe\"', 'nodes', parseCSV);\n\nnodes();\n\n//  [ [ 'Image Name', 'PID', 'Session Name', 'Session#', 'Mem Usage' ],\n//    [ 'node.exe', '6524', 'Console', '3', '13,060 K' ] ]\n\n```",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/PhilipSkinner/windows.git"
  },
  "scripts": {
    "test": "jasmine"
  },
  "tags": [
    "Windows",
    "cmd",
    "drive alias",
    "fonts",
    "os",
    "platform",
    "regedit",
    "registry",
    "utility",
    "win32",
    "windows sdk"
  ],
  "version": "0.0.8"
}
