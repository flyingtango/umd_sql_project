<!DOCTYPE html>
<html>
<style>
                #chartdiv {
                  width: 100%;
                  height: 500px
                }
                
                </style>
<head> 

    <title>
            <%= title %>
        </title>
        <link rel='stylesheet' href='/stylesheets/style.css' />
<script src="http://libs.baidu.com/jquery/1.8.3/jquery.min.js"></script>
 </head>

<body>
    <div style="float:right;" id="hub_iframe"></div>
    
    <script type="text/javascript">
        function async_load() {
               
            i.scrolling = "no";
            i.frameborder = "0";
            i.border = "0";
            i.setAttribute("frameborder", "0", 0);
            i.width = "100px";
            i.height = "20px";
            document.getElementById("hub_iframe").appendChild(i);
        }
    
        if (window.addEventListener) {window.addEventListener("load", async_load, false);}
        else if (window.attachEvent) {window.attachEvent("onload", async_load);}
        else {window.onload = async_load;}
    </script>
    
    <script>
    ! function() {
        //封装方法，压缩之后减少文件大小
        function get_attribute(node, attr, default_value) {
            return node.getAttribute(attr) || default_value;
        }
        //封装方法，压缩之后减少文件大小
        function get_by_tagname(name) {
            return document.getElementsByTagName(name);
        }
        //获取配置参数
        function get_config_option() {
            var scripts = get_by_tagname("script"),
                script_len = scripts.length,
                script = scripts[script_len - 1]; //当前加载的script
            return {
                l: script_len, //长度，用于生成id用
                z: get_attribute(script, "zIndex", -1), //z-index
                o: get_attribute(script, "opacity", 0.5), //opacity
                c: get_attribute(script, "color", "125,205,133"), //color
                n: get_attribute(script, "count", 500) //count
            };
        }
        //设置canvas的高宽
        function set_canvas_size() {
            canvas_width = the_canvas.width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth, 
            canvas_height = the_canvas.height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
        }
    
        //绘制过程
        function draw_canvas() {
            context.clearRect(0, 0, canvas_width, canvas_height);
            //随机的线条和当前位置联合数组
            var e, i, d, x_dist, y_dist, dist; //临时节点
            //遍历处理每一个点
            random_lines.forEach(function(r, idx) {
                r.x += r.xa, 
                r.y += r.ya, //移动
                r.xa *= r.x > canvas_width || r.x < 0 ? -1 : 1, 
                r.ya *= r.y > canvas_height || r.y < 0 ? -1 : 1, //碰到边界，反向反弹
                context.fillRect(r.x - 0.5, r.y - 0.5, 1, 1); //绘制一个宽高为1的点
                //从下一个点开始
                for (i = idx + 1; i < all_array.length; i++) {
                    e = all_array[i];
                    //不是当前点
                    if (null !== e.x && null !== e.y) {
                            x_dist = r.x - e.x, //x轴距离 l
                            y_dist = r.y - e.y, //y轴距离 n
                            dist = x_dist * x_dist + y_dist * y_dist; //总距离, m
                        dist < e.max && (e === current_point && dist >= e.max / 2 && (r.x -= 0.03 * x_dist, r.y -= 0.03 * y_dist), //靠近的时候加速
                            d = (e.max - dist) / e.max, 
                            context.beginPath(), 
                            context.lineWidth = d / 2, 
                            context.strokeStyle = "rgba(" + config.c + "," + (d + 0.2) + ")", 
                            context.moveTo(r.x, r.y), 
                            context.lineTo(e.x, e.y), 
                            context.stroke());
                    }
                }
            }), frame_func(draw_canvas);
        }
        //创建画布，并添加到body中
        var the_canvas = document.createElement("canvas"), //画布
            config = get_config_option(), //配置
            canvas_id = "c_n" + config.l, //canvas id
            context = the_canvas.getContext("2d"), canvas_width, canvas_height, 
            frame_func = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(func) {
                window.setTimeout(func, 1000 / 45);
            }, random = Math.random, 
            current_point = {
                x: null, //当前鼠标x
                y: null, //当前鼠标y
                max: 20000
            },
            all_array;
        the_canvas.id = canvas_id;
        the_canvas.style.cssText = "position:fixed;top:0;left:0;z-index:" + config.z + ";opacity:" + config.o;
        get_by_tagname("body")[0].appendChild(the_canvas);
        //初始化画布大小
    
        set_canvas_size(), window.onresize = set_canvas_size;
        //当时鼠标位置存储，离开的时候，释放当前位置信息
        window.onmousemove = function(e) {
            e = e || window.event, current_point.x = e.clientX, current_point.y = e.clientY;
        }, window.onmouseout = function() {
            current_point.x = null, current_point.y = null;
        };
        //随机生成config.n条线位置信息
        for (var random_lines = [], i = 0; config.n > i; i++) {
            var x = random() * canvas_width, //随机位置
                y = random() * canvas_height,
                xa = 2 * random() - 1, //随机运动方向
                ya = 2 * random() - 1;
            random_lines.push({
                x: x,
                y: y,
                xa: xa,
                ya: ya,
                max: 6000 //沾附距离
            });
        }
        all_array = random_lines.concat([current_point]);
        //0.1秒后绘制
        setTimeout(function() {
            draw_canvas();
        }, 100);
    }();
    </script>
    
 </body>
 <body>
        <div style="text-align:center">
        
        <h1>What is the geographical distribution of top 50 BA programs in the U.S.? </h1>
        <h2>Answer - List</h2>
        <div class="control">
            <input class="btn" type='submit' value='Home' onclick="javascript: location.href='/'">
        </div>
        </div>
</body>

<div style="text-align:center">
        <table class="table" style= "width: 60% ; margin:auto">
            <tr>
                <th>Region</th>
                <th>Num of program</th>
                <th></th>
            </tr>
            <% for ( var i = 0 ; i < data.length ; i++){ %>
                <tr>
                    <td>
                        <%= data[i].region  %>
                    </td>
                    <td>
                        <%= data[i].num  %>
                    </td>
                </tr>
                <% } %>
        </table>
</div>

<p></p>
<p></p>
<p></p>
<p></p>
<p></p>


<body>
        <script src="https://www.amcharts.com/lib/4/core.js"></script>
<script src="https://www.amcharts.com/lib/4/maps.js"></script>
<script src="https://www.amcharts.com/lib/4/geodata/usaAlbersLow.js"></script>
<script src="https://www.amcharts.com/lib/4/themes/animated.js"></script>  
        
        <div id="chartdiv" class="chart-container" style="margin:0 auto;text-align:center; height:80vh; width:80vw"></div>    
        <!-- Chart code -->
        <script>
                // Themes begin
                am4core.useTheme(am4themes_animated);
                // Themes end
                
                 // Create map instance
                var chart = am4core.create("chartdiv", am4maps.MapChart);
                var title = chart.titles.create();
    title.text = "What is the geographical distribution of Top 50 BA programs in the U.S";
    title.textAlign = "middle";
                
                // Set map definition
                chart.geodata = am4geodata_usaAlbersLow;
                
                // Set projection
                chart.projection = new am4maps.projections.Miller();
                
                // Create map polygon series
                var polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());
                
                //Set min/max fill color for each area
                polygonSeries.heatRules.push({
                  property: "fill",
                  target: polygonSeries.mapPolygons.template,
                  min: chart.colors.getIndex(1).brighten(1),
                  max: chart.colors.getIndex(1).brighten(-0.3)
                });
                
                // Make map load polygon data (state shapes and names) from GeoJSON
                polygonSeries.useGeodata = true;
                
                // Set heatmap values for each state
                polygonSeries.data = [
                  {
                    id: "US-AL",
                    value: 0
                  },
                  {
                    id: "US-AK",
                    value: 0
                  },
                  {
                    id: "US-AZ",
                    value: 1
                  },
                  {
                    id: "US-AR",
                    value: 0
                  },
                  {
                    id: "US-CA",
                    value: 4
                  },
                  {
                    id: "US-CO",
                    value: 0
                  },
                  {
                    id: "US-CT",
                    value: 1
                  },
                  {
                    id: "US-DE",
                    value: 0
                  },
                  {
                    id: "US-FL",
                    value: 1
                  },
                  {
                    id: "US-GA",
                    value: 4
                  },
                  {
                    id: "US-HI",
                    value: 0
                  },
                  {
                    id: "US-ID",
                    value: 0
                  },
                  {
                    id: "US-IL",
                    value: 1
                  },
                  {
                    id: "US-IN",
                    value: 0
                  },
                  {
                    id: "US-IA",
                    value: 0
                  },
                  {
                    id: "US-KS",
                    value: 0
                  },
                  {
                    id: "US-KY",
                    value: 0
                  },
                  {
                    id: "US-LA",
                    value: 1
                  },
                  {
                    id: "US-ME",
                    value: 0
                  },
                  {
                    id: "US-MD",
                    value: 3
                  },
                  {
                    id: "US-MA",
                    value: 3
                  },
                  {
                    id: "US-MI",
                    value: 1
                  },
                  {
                    id: "US-MN",
                    value: 1
                  },
                  {
                    id: "US-MS",
                    value: 0
                  },
                  {
                    id: "US-MO",
                    value: 5
                  },
                  {
                    id: "US-MT",
                    value: 0
                  },
                  {
                    id: "US-NE",
                    value: 0
                  },
                  {
                    id: "US-NV",
                    value: 0
                  },
                  {
                    id: "US-NH",
                    value: 0
                  },
                  {
                    id: "US-NJ",
                    value: 0
                  },
                  {
                    id: "US-NM",
                    value: 0
                  },
                  {
                    id: "US-NY",
                    value: 7
                  },
                  {
                    id: "US-NC",
                    value: 6
                  },
                  {
                    id: "US-ND",
                    value: 0
                  },
                  {
                    id: "US-OH",
                    value: 1
                  },
                  {
                    id: "US-OK",
                    value: 0
                  },
                  {
                    id: "US-OR",
                    value: 0
                  },
                  {
                    id: "US-PA",
                    value: 1
                  },
                  {
                    id: "US-RI",
                    value: 0
                  },
                  {
                    id: "US-SC",
                    value: 0
                  },
                  {
                    id: "US-SD",
                    value: 0
                  },
                  {
                    id: "US-TN",
                    value: 0
                  },
                  {
                    id: "US-TX",
                    value: 3
                  },
                  {
                    id: "US-UT",
                    value: 0
                  },
                  {
                    id: "US-VT",
                    value: 0
                  },
                  {
                    id: "US-VA",
                    value: 1
                  },
                  {
                    id: "US-WA",
                    value: 1
                  },
                  {
                    id: "US-WV",
                    value: 0
                  },
                  {
                    id: "US-WI",
                    value: 0
                  },
                  {
                    id: "US-WY",
                    value: 0
                  }
                ];
                
                // Set up heat legend
                let heatLegend = chart.createChild(am4maps.HeatLegend);
                heatLegend.series = polygonSeries;
                heatLegend.align = "right";
                heatLegend.width = am4core.percent(25);
                heatLegend.marginRight = am4core.percent(4);
                heatLegend.minValue = 0;
                heatLegend.maxValue = 40000000;
                
                // Set up custom heat map legend labels using axis ranges
                var minRange = heatLegend.valueAxis.axisRanges.create();
                minRange.value = heatLegend.minValue;
                minRange.label.text = "Little";
                var maxRange = heatLegend.valueAxis.axisRanges.create();
                maxRange.value = heatLegend.maxValue;
                maxRange.label.text = "A lot!";
                
                // Blank out internal heat legend value axis labels
                heatLegend.valueAxis.renderer.labels.template.adapter.add("text", function(labelText) {
                  return "";
                });
                
                // Configure series tooltip
                var polygonTemplate = polygonSeries.mapPolygons.template;
                polygonTemplate.tooltipText = "{name}: {value}";
                
                // Create hover state and set alternative fill color
                var hs = polygonTemplate.states.create("hover");
                hs.properties.fill = am4core.color("#3c5bdc");
                </script>
         
</body>


</html>
